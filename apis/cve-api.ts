/* tslint:disable */
/* eslint-disable */
/**
 * National Vulnerability Database API
 * Swagger specification for <https://nvd.nist.gov/developers/vulnerabilities>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200 } from '../models';
/**
 * CveApi - axios parameter creator
 * @export
 */
export const CveApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve a specific CVE
         * @param {string} cveId The CVE Identifier. This is the only parameter that is part of the URL Path.
         * @param {Array<string>} [addOns] This parameter is part of the URL query. By default, the response includes all CPE applicability statements associated with the vulnerability. Applicability statements are CPE match strings that may be used in searching the Official CPE Dictionary. Including &#x60;addOns&#x3D;dictionaryCpes&#x60; adds the official CPE names to the request, but can return a significantly denser amount of text. 
         * @param {string} [apiKey] The API Key provided to the requestor. This parameter is part of the URL query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cve10CveIdGet: async (cveId: string, addOns?: Array<string>, apiKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cveId' is not null or undefined
            if (cveId === null || cveId === undefined) {
                throw new RequiredError('cveId','Required parameter cveId was null or undefined when calling cve10CveIdGet.');
            }
            const localVarPath = `/cve/1.0/{cveId}/`
                .replace(`{${"cveId"}}`, encodeURIComponent(String(cveId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (addOns) {
                localVarQueryParameter['addOns'] = addOns;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['apiKey'] = apiKey;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CveApi - functional programming interface
 * @export
 */
export const CveApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve a specific CVE
         * @param {string} cveId The CVE Identifier. This is the only parameter that is part of the URL Path.
         * @param {Array<string>} [addOns] This parameter is part of the URL query. By default, the response includes all CPE applicability statements associated with the vulnerability. Applicability statements are CPE match strings that may be used in searching the Official CPE Dictionary. Including &#x60;addOns&#x3D;dictionaryCpes&#x60; adds the official CPE names to the request, but can return a significantly denser amount of text. 
         * @param {string} [apiKey] The API Key provided to the requestor. This parameter is part of the URL query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cve10CveIdGet(cveId: string, addOns?: Array<string>, apiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await CveApiAxiosParamCreator(configuration).cve10CveIdGet(cveId, addOns, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CveApi - factory interface
 * @export
 */
export const CveApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Retrieve a specific CVE
         * @param {string} cveId The CVE Identifier. This is the only parameter that is part of the URL Path.
         * @param {Array<string>} [addOns] This parameter is part of the URL query. By default, the response includes all CPE applicability statements associated with the vulnerability. Applicability statements are CPE match strings that may be used in searching the Official CPE Dictionary. Including &#x60;addOns&#x3D;dictionaryCpes&#x60; adds the official CPE names to the request, but can return a significantly denser amount of text. 
         * @param {string} [apiKey] The API Key provided to the requestor. This parameter is part of the URL query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cve10CveIdGet(cveId: string, addOns?: Array<string>, apiKey?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return CveApiFp(configuration).cve10CveIdGet(cveId, addOns, apiKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CveApi - object-oriented interface
 * @export
 * @class CveApi
 * @extends {BaseAPI}
 */
export class CveApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve a specific CVE
     * @param {string} cveId The CVE Identifier. This is the only parameter that is part of the URL Path.
     * @param {Array<string>} [addOns] This parameter is part of the URL query. By default, the response includes all CPE applicability statements associated with the vulnerability. Applicability statements are CPE match strings that may be used in searching the Official CPE Dictionary. Including &#x60;addOns&#x3D;dictionaryCpes&#x60; adds the official CPE names to the request, but can return a significantly denser amount of text. 
     * @param {string} [apiKey] The API Key provided to the requestor. This parameter is part of the URL query.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CveApi
     */
    public async cve10CveIdGet(cveId: string, addOns?: Array<string>, apiKey?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return CveApiFp(this.configuration).cve10CveIdGet(cveId, addOns, apiKey, options).then((request) => request(this.axios, this.basePath));
    }
}
